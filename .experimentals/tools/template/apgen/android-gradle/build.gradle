apply plugin: 'com.android.application'

buildscript {
	repositories {
		google()
		jcenter()
	}
	dependencies {
		classpath 'com.android.tools.build:gradle:3.4.2'
		classpath 'com.google.gms:google-services:3.1.1'
	}
}

allprojects {
	repositories {
		google()
		jcenter()
		maven {
			url "https://maven.google.com"
		}
	}
}

android {
	compileSdkVersion 28
	defaultConfig {
		applicationId		"${Android.ApplicationId|Android.Manifest.Package|PACKAGE|APPLICATIONID}"
		minSdkVersion		24
		targetSdkVersion	29
		versionCode			${Android.BuildGradle.VersionCode|Application.VersionCode:1}
		versionName			"${Android.BuildGradle.VersionName|Application.VersionName:1.0}"
		// https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.ExternalNativeCmakeOptions.html
		externalNativeBuild {
.if(${Android.BuildGradle.CmakeArguments})
			cmake.arguments	= [
	.for(__arg ${Android.BuildGradle.CmakeArguments})
		.if(NOT ${__for_count})
			${__arg}
		.else
			, ${__arg}
		.end
	.end
			]
.end
			cmake.cFlags	= [ "-std=c11" ]
			cmake.cppFlags	= [ "-std=c++17" ]
		}
	}
	sourceSets {
		main.assets.srcDirs = [
.for(__path ${Android.BuildGradle.Assets.SrcDirs:${APGEN_STARTUP_DIR}/asset})
	.if(NOT ${__for_count})
			"@normalize_path(${__path} TRUE)"
	.else
			,"@normalize_path(${__path} TRUE)"
	.end
.end
		]
		// main resources
		main.res.srcDirs = [
.for(__path ${Android.BuildGradle.Res.SrcDirs:${APGEN_STARTUP_DIR}/res/android})
	.if(NOT ${__for_count})
			"@normalize_path(${__path} TRUE)"
	.else
			,"@normalize_path(${__path} TRUE)"
	.end
.end
		]

		// debug resources
		debug.res.srcDirs = [
.for(__path ${Android.BuildGradle.Res.SrcDirs:${APGEN_STARTUP_DIR}/res/android-debug})
	.if(NOT ${__for_count})
			"@normalize_path(${__path} TRUE)"
	.else
			,"@normalize_path(${__path} TRUE)"
	.end
.end
		]

		main.java.srcDirs = [
.for(__path ${Android.BuildGradle.Java.SrcDirs:${APGEN_STARTUP_DIR}/src-android})
	.if(NOT ${__for_count})
			"@normalize_path(${__path} TRUE)"
	.else
			,"@normalize_path(${__path} TRUE)"
	.end
.end
		]
	}
.if(${Android.BuildGradle.signingConfigs.storeFile})
	signingConfigs {
		release {
			storeFile		@normalize_path(${Android.BuildGradle.signingConfigs.storeFile} TRUE)
			storePassword	${Android.BuildGradle.signingConfigs.storePassword}
			keyAlias		${Android.BuildGradle.signingConfigs.keyAlias}
			keyPassword		${Android.BuildGradle.signingConfigs.keyPassword}
		}
		debug {
			storeFile		@normalize_path(${Android.BuildGradle.signingConfigs.storeFile} TRUE)
			storePassword	${Android.BuildGradle.signingConfigs.storePassword}
			keyAlias		${Android.BuildGradle.signingConfigs.keyAlias}
			keyPassword		${Android.BuildGradle.signingConfigs.keyPassword}
		}
	}
.end
	buildTypes {
		release {
			minifyEnabled	false
			debuggable		false
            zipAlignEnabled	true
.if(${Android.BuildGradle.signingConfigs.storeFile})
			signingConfig	signingConfigs.release
.end
			externalNativeBuild {
				cmake.cFlags	= [ "-DAPGEN_TYPE_RELEASE=1", "-DNDK_DEBUG=0", "-O2", "-g" ]
				cmake.cppFlags	= [ "-DAPGEN_TYPE_RELEASE=1", "-DNDK_DEBUG=0", "-O2", "-g" ]
			}
			ndk {
				abiFilters	'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
			}
		}
		debug {
			//applicationIdSuffix		".debug"
			minifyEnabled			false
            debuggable				true
.if(${Android.BuildGradle.signingConfigs.storeFile})
			signingConfig	signingConfigs.debug
.end
			externalNativeBuild {
				cmake.cFlags	= [ "-DAPGEN_TYPE_DEBUG=1", "-DDEBUG" ]
				cmake.cppFlags	= [ "-DAPGEN_TYPE_DEBUG=1", "-DDEBUG" ]
			}
			ndk {
				abiFilters	'arm64-v8a'
			}
		}
	}
	externalNativeBuild {
		cmake.path		"@normalize_path(${Android.BuildGradle.CMakeLists:${APGEN_STARTUP_DIR}/CMakeLists.txt} TRUE)"
		cmake.version	"3.10.2"
	}
}

dependencies {
	def appcompat_version = "1.1.0"
	implementation "androidx.appcompat:appcompat:$appcompat_version"
	implementation "androidx.appcompat:appcompat-resources:$appcompat_version"

//	implementation	"com.android.support:appcompat-v7:21.0.+"
	implementation	'com.android.billingclient:billing:2.0.1'
	implementation	fileTree(dir: 'libs', include: ['*.jar'])

.if(${Android.modules.Admob.use)
	implementation 'com.google.android.gms:play-services-ads:19.3.0'
.end

}
