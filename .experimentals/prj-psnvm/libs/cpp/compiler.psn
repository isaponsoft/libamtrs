#include "def.psn"

class	compiler
{
public:
	enum	cstd
	{
		cpp98,
		cpp03,
		cpp11,
		cpp14,
		cpp17,
		cpp20,
	};

	enum	optmizetype
	{
		best,
		fast,
		small,
		none,
		debug,
	};



	compiler^ compiler()
	{
		if (os::iswindows())
		{
			return	new compiler_visualcpp();
		}
		else
		{
			if (filesystem::which("clang++"))
			{
				return	new compiler_clangpp();
			}
			if (filesystem::which("g++"))
			{
				return	new compiler_gnucpp();
			}
		}
		throw	std::runtime_error("compiler nothing.");
	}


	int compile(process^ _proc = nullptr)
	{
		if (!_proc)
		{
			_proc	= new process();
		}
	}

	//! 戻り値に this を指定するとthisポインタを返す。
	//! 呼び出し時に.演算子を用いていた場合は *this に置き換わる。
	this enable_exception(bool _enable = true)
	{
		mEnable.exceptin	= _enable;
		return	this;
	}

	this set_include_path(string[] _includes)
	{
		mIncludes = _includes;
		return	this;
	}

	this set_library_path(string[] _librariess)
	{
		mLibPath = _librariess;
		return	this;
	}


protected:
	virtual string on_includes(string[] _includes)
	{
		return	string::join(" ", filter(_includes.begin(), _includes.end(), [](auto _include)
				{
					return	on_include(_include);
				}));
	}

	virtual string on_include(string_ include) = 0;

private:
	string[]	mIncludes;
	string[]	mLibPath;
	struct		options
	{
		bool		exception	= true;
		optmizetype	optimize	= best;
	}			mEnable;
};


