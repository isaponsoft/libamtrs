/* Copyright (c) 2019, isaponsoft (Isao Shibuya) All rights reserved. *
 * Use of this source code is governed by a BSD-style  license that   *
 * can be found in the LICENSE file.                                  */
#include "error.hpp"
AMTRS_OS_NAMESPACE_BEGIN
struct	win_to_errorno
{
	DWORD	win;
	int		errn;
};

#define _MAKEERR(win, en)	{win, en}
static	win_to_errorno const	errs[] = {
	_MAKEERR(ERROR_ACCESS_DENIED,				EACCES),
	_MAKEERR(ERROR_ACTIVE_CONNECTIONS,			EAGAIN),
	_MAKEERR(ERROR_ALREADY_EXISTS,				EEXIST),
	_MAKEERR(ERROR_BAD_DEVICE,					ENODEV),
	_MAKEERR(ERROR_BAD_EXE_FORMAT,				ENOEXEC),
	_MAKEERR(ERROR_BAD_NETPATH,					ENOENT),
	_MAKEERR(ERROR_BAD_NET_NAME,				ENOENT),
	_MAKEERR(ERROR_BAD_NET_RESP,				ENOSYS),
	_MAKEERR(ERROR_BAD_PATHNAME,				ENOENT),
	_MAKEERR(ERROR_BAD_PIPE,					EINVAL),
	_MAKEERR(ERROR_BAD_UNIT,					ENODEV),
	_MAKEERR(ERROR_BAD_USERNAME,				EINVAL),
	_MAKEERR(ERROR_BEGINNING_OF_MEDIA,			EIO),
	_MAKEERR(ERROR_BROKEN_PIPE,					EPIPE),
	_MAKEERR(ERROR_BUSY,						EBUSY),
	_MAKEERR(ERROR_BUS_RESET,					EIO),
	_MAKEERR(ERROR_CALL_NOT_IMPLEMENTED,		ENOSYS),
	_MAKEERR(ERROR_CANCELLED,					EINTR),
	_MAKEERR(ERROR_CANNOT_MAKE,					EPERM),
	_MAKEERR(ERROR_CHILD_NOT_COMPLETE,			EBUSY),
	_MAKEERR(ERROR_COMMITMENT_LIMIT,			EAGAIN),
	_MAKEERR(ERROR_CONNECTION_REFUSED,			ECONNREFUSED),
	_MAKEERR(ERROR_CRC,							EIO),
	_MAKEERR(ERROR_DEVICE_DOOR_OPEN,			EIO),
	_MAKEERR(ERROR_DEVICE_IN_USE,				EAGAIN),
	_MAKEERR(ERROR_DEVICE_REQUIRES_CLEANING,	EIO),
	_MAKEERR(ERROR_DEV_NOT_EXIST,				ENOENT),
	_MAKEERR(ERROR_DIRECTORY,					ENOTDIR),
	_MAKEERR(ERROR_DIR_NOT_EMPTY,				ENOTEMPTY),
	_MAKEERR(ERROR_DISK_CORRUPT,				EIO),
	_MAKEERR(ERROR_DISK_FULL,					ENOSPC),
	_MAKEERR(ERROR_DS_GENERIC_ERROR,			EIO),
	_MAKEERR(ERROR_DUP_NAME,					ENOTUNIQ),
	_MAKEERR(ERROR_EAS_DIDNT_FIT,				ENOSPC),
	_MAKEERR(ERROR_EAS_NOT_SUPPORTED,			ENOTSUP),
	_MAKEERR(ERROR_EA_LIST_INCONSISTENT,		EINVAL),
	_MAKEERR(ERROR_EA_TABLE_FULL,				ENOSPC),
	_MAKEERR(ERROR_END_OF_MEDIA,				ENOSPC),
	_MAKEERR(ERROR_EOM_OVERFLOW,				EIO),
	_MAKEERR(ERROR_EXE_MACHINE_TYPE_MISMATCH,	ENOEXEC),
	_MAKEERR(ERROR_EXE_MARKED_INVALID,			ENOEXEC),
	_MAKEERR(ERROR_FILEMARK_DETECTED,			EIO),
	_MAKEERR(ERROR_FILENAME_EXCED_RANGE,		ENAMETOOLONG),
	_MAKEERR(ERROR_FILE_CORRUPT,				EEXIST),
	_MAKEERR(ERROR_FILE_EXISTS,					EEXIST),
	_MAKEERR(ERROR_FILE_INVALID,				ENXIO),
	_MAKEERR(ERROR_FILE_NOT_FOUND,				ENOENT),
	_MAKEERR(ERROR_HANDLE_DISK_FULL,			ENOSPC),
	_MAKEERR(ERROR_HANDLE_EOF,					ENODATA),
	_MAKEERR(ERROR_INVALID_ADDRESS,				EINVAL),
	_MAKEERR(ERROR_INVALID_AT_INTERRUPT_TIME,	EINTR),
	_MAKEERR(ERROR_INVALID_BLOCK_LENGTH,		EIO),
	_MAKEERR(ERROR_INVALID_DATA,				EINVAL),
	_MAKEERR(ERROR_INVALID_DRIVE,				ENODEV),
	_MAKEERR(ERROR_INVALID_EA_NAME,				EINVAL),
	_MAKEERR(ERROR_INVALID_EXE_SIGNATURE,		ENOEXEC),
	_MAKEERR(ERROR_INVALID_FUNCTION,			EBADRQC),
	_MAKEERR(ERROR_INVALID_HANDLE,				EBADF),
	_MAKEERR(ERROR_INVALID_NAME,				ENOENT),
	_MAKEERR(ERROR_INVALID_PARAMETER,			EINVAL),
	_MAKEERR(ERROR_INVALID_SIGNAL_NUMBER,		EINVAL),
	_MAKEERR(ERROR_IOPL_NOT_ENABLED,			ENOEXEC),
	_MAKEERR(ERROR_IO_DEVICE,					EIO),
	_MAKEERR(ERROR_IO_INCOMPLETE,				EAGAIN),
	_MAKEERR(ERROR_IO_PENDING,					EAGAIN),
	_MAKEERR(ERROR_LOCK_VIOLATION,				EBUSY),
	_MAKEERR(ERROR_MAX_THRDS_REACHED,			EAGAIN),
	_MAKEERR(ERROR_META_EXPANSION_TOO_LONG,		EINVAL),
	_MAKEERR(ERROR_MOD_NOT_FOUND,				ENOENT),
	_MAKEERR(ERROR_MORE_DATA,					EMSGSIZE),
	_MAKEERR(ERROR_NEGATIVE_SEEK,				EINVAL),
	_MAKEERR(ERROR_NETNAME_DELETED,				ENOENT),
	_MAKEERR(ERROR_NOACCESS,					EFAULT),
	_MAKEERR(ERROR_NONE_MAPPED,					EINVAL),
	_MAKEERR(ERROR_NONPAGED_SYSTEM_RESOURCES,	EAGAIN),
	_MAKEERR(ERROR_NOT_CONNECTED,				ENOLINK),
	_MAKEERR(ERROR_NOT_ENOUGH_MEMORY,			ENOMEM),
	_MAKEERR(ERROR_NOT_ENOUGH_QUOTA,			EIO),
	_MAKEERR(ERROR_NOT_OWNER,					EPERM),
	_MAKEERR(ERROR_NOT_READY,					ENOMEDIUM),
	_MAKEERR(ERROR_NOT_SAME_DEVICE,				EXDEV),
	_MAKEERR(ERROR_NOT_SUPPORTED,				ENOSYS),
	_MAKEERR(ERROR_NO_DATA,						EPIPE),
	_MAKEERR(ERROR_NO_DATA_DETECTED,			EIO),
	_MAKEERR(ERROR_NO_MEDIA_IN_DRIVE,			ENOMEDIUM),
	_MAKEERR(ERROR_NO_MORE_FILES,				EMFILE),
	_MAKEERR(ERROR_NO_MORE_ITEMS,				EMFILE),
	_MAKEERR(ERROR_NO_MORE_SEARCH_HANDLES,		ENFILE),
	_MAKEERR(ERROR_NO_PROC_SLOTS,				EAGAIN),
	_MAKEERR(ERROR_NO_SIGNAL_SENT,				EIO),
	_MAKEERR(ERROR_NO_SYSTEM_RESOURCES,			EFBIG),
	_MAKEERR(ERROR_NO_TOKEN,					EINVAL),
	_MAKEERR(ERROR_OPEN_FAILED,					EIO),
	_MAKEERR(ERROR_OPEN_FILES,					EAGAIN),
	_MAKEERR(ERROR_OUTOFMEMORY,					ENOMEM),
	_MAKEERR(ERROR_PAGED_SYSTEM_RESOURCES,		EAGAIN),
	_MAKEERR(ERROR_PAGEFILE_QUOTA,				EAGAIN),
	_MAKEERR(ERROR_PATH_NOT_FOUND,				ENOENT),
	_MAKEERR(ERROR_PIPE_BUSY,					EBUSY),
	_MAKEERR(ERROR_PIPE_CONNECTED,				EBUSY),
	_MAKEERR(ERROR_PIPE_LISTENING,				ECOMM),
	_MAKEERR(ERROR_PIPE_NOT_CONNECTED,			ECOMM),
	_MAKEERR(ERROR_POSSIBLE_DEADLOCK,			EDEADLOCK),
	_MAKEERR(ERROR_PRIVILEGE_NOT_HELD,			EPERM),
	_MAKEERR(ERROR_PROCESS_ABORTED,				EFAULT),
	_MAKEERR(ERROR_PROC_NOT_FOUND,				ESRCH),
	_MAKEERR(ERROR_REM_NOT_LIST,				ENONET),
	_MAKEERR(ERROR_SECTOR_NOT_FOUND,			EINVAL),
	_MAKEERR(ERROR_SEEK,						EINVAL),
	_MAKEERR(ERROR_SERVICE_REQUEST_TIMEOUT,		EBUSY),
	_MAKEERR(ERROR_SETMARK_DETECTED,			EIO),
	_MAKEERR(ERROR_SHARING_BUFFER_EXCEEDED,		ENOLCK),
	_MAKEERR(ERROR_SHARING_VIOLATION,			EBUSY),
	_MAKEERR(ERROR_SIGNAL_PENDING,				EBUSY),
	_MAKEERR(ERROR_SIGNAL_REFUSED,				EIO),
	_MAKEERR(ERROR_SXS_CANT_GEN_ACTCTX,			ELIBBAD),
	_MAKEERR(ERROR_THREAD_1_INACTIVE,			EINVAL),
	_MAKEERR(ERROR_TIMEOUT,						EBUSY),
	_MAKEERR(ERROR_TOO_MANY_LINKS,				EMLINK),
	_MAKEERR(ERROR_TOO_MANY_OPEN_FILES,			EMFILE),
	_MAKEERR(ERROR_UNEXP_NET_ERR,				EIO),
	_MAKEERR(ERROR_WAIT_NO_CHILDREN,			ECHILD),
	_MAKEERR(ERROR_WORKING_SET_QUOTA,			EAGAIN),
	_MAKEERR(ERROR_WRITE_PROTECT,				EROFS),
};

int get_errorno(DWORD winerr) noexcept
{
	for (auto& e : errs)
	{
		if (e.win == winerr)
		{
			return	e.errn;
		}
	}
	return	0;
}

AMTRS_OS_NAMESPACE_END
AMTRS_NAMESPACE_BEGIN
thread_local static char	sMsgbuff[1024];

int errorval::to_errno() const noexcept
{
	if (type() == 1)
	{
		return	os::get_errorno(code());
	}
	return	_en;
}

char const* errorval::message() const noexcept
{
	if (type() == 0)
	{
#if		AMTRS_CURRENT_PLATFORM == AMTRS_PLATFORM_WIN32
		thread_local	char	buff[95];	// max 94 char. https://docs.microsoft.com/ja-jp/cpp/c-runtime-library/reference/strerror-s-strerror-s-wcserror-s-wcserror-s?view=msvc-170
		strerror_s(buff, sizeof(buff), code());
		return	buff;
#else
		return	strerror(code());
#endif
	}
	if (type() == 1)
	{
		LPVOID	msgbuf;
        DWORD	len	= 
			FormatMessageW(
				FORMAT_MESSAGE_ALLOCATE_BUFFER|FORMAT_MESSAGE_FROM_SYSTEM|FORMAT_MESSAGE_IGNORE_INSERTS,
				NULL, code(), 0,//MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
				(wchar_t*)&msgbuf, 0, NULL
			);
		sMsgbuff[0]	= 0;
		if (len > 0)
		{
			sstring	msg	= wc_to_c8(wtext{(wchar_t const*)msgbuf, (size_t)(len-1)});
			LocalFree(msgbuf);
			std::copy_n(msg.data(), msg.size(), &sMsgbuff[0]);
			sMsgbuff[msg.size()]	= 0;
		}
		return	sMsgbuff;
	}
	return	_message();
}
AMTRS_NAMESPACE_END
